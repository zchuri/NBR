# Load lme4 & lmerTest packages
library(lme4)
library(lmerTest)
# Generate models
# Null model (only sex)
mod_null <- lmer(formula = FDRMS~Sex + (1|BIDS.ID),
data = info,
REML = F,
control=lmerControl(optimizer="Nelder_Mead"))
# Age model
mod_age <- lmer(formula = FDRMS~Sex + Age + (1|BIDS.ID),
data = info,
REML = F,
control=lmerControl(optimizer="Nelder_Mead"))
# PDS model
mod_pds <- lmer(formula = FDRMS~Sex + PDSe + (1|BIDS.ID),
data = info,
REML = F,
control=lmerControl(optimizer="Nelder_Mead"))
# Age+PDS model
mod_agepds <- lmer(formula = FDRMS~Sex + Age + PDSe + (1|BIDS.ID),
data = info,
REML = F,
control=lmerControl(optimizer="Nelder_Mead"))
# Age*PDS model
mod_agexpds <- lmer(formula = FDRMS~Sex + Age * PDSe + (1|BIDS.ID),
data = info,
REML = F,
control=lmerControl(optimizer="Nelder_Mead"))
summary(mod_agexpds)
mod_full <- lmer(formula = FDRMS~Sex + Age + PDSe + Age * PDSe + (1|BIDS.ID),
data = info,
REML = F,
control=lmerControl(optimizer="Nelder_Mead"))
summary(mod_full)
AIC(mod_agexpds,mod_full)
# Read data with random-effects structure
info <- read.csv("https://raw.githubusercontent.com/BrainMapINB/Pubertal_Connectome/main/Phenotypic/phenotypic.csv")
# Character variables as factor
info$Sex <- factor(info$Sex)
info$BIDS.ID <- factor(info$BIDS.ID)
names(info)
head(info)
names(info)
# Generate models
# Null model (only FDRMS)
mod_null <- glm(formula = Sex ~ FDRMS, data = info, family = "binomial")
summary(mod_null)
# Age model
mod_age <- glm(formula = Sex ~ Age + FDRMS, data = info, family = "binomial")
# PDS model
mod_pds <- glm(formula = Sex ~ PDSe + FDRMS, data = info, family = "binomial")
# Age+PDS model
mod_agepds <- glm(formula = Sex ~ Age + PDSe + FDRMS, data = info, family = "binomial")
# Age*PDS model
mod_agexpds <- glm(formula = Sex ~ Age * PDSe + FDRMS, data = info, family = "binomial")
# Model comparison by the means of AIC
mod_aic <- AIC(mod_null, mod_age, mod_pds, mod_agepds, mod_agexpds)
mod_aic
anova(mod_null, mod_age)
logLik(mod_age)+logLik(mod_null)
logLik(mod_age)-logLik(mod_null)
# Model compared against the null models by the means of LRT
lrt_age <- anova(mod_null, mod_age, test = "LRT")
lrt_age
# Model compared against the null models by the means of LRT
lrt_age <- anova(mod_null, mod_age, test = "LRT")
lrt_pds <- anova(mod_null, mod_pds, test = "LRT")
lrt_agepds <- anova(mod_null, mod_agepds, test = "LRT")
lrt_agexpds <- anova(mod_null, mod_agexpds, test = "LRT")
# Store results into a table
res_mat <- matrix(data = as.numeric(NA), nrow = 5, ncol = 3)
res_mat[2,] <- c(lrt_age$Chisq[2],lrt_age$Df[2],lrt_age$`Pr(>Chisq)`[2])
res_mat[3,] <- c(lrt_pds$Chisq[2],lrt_pds$Df[2],lrt_pds$`Pr(>Chisq)`[2])
res_mat[4,] <- c(lrt_agepds$Chisq[2],lrt_agepds$Df[2],lrt_agepds$`Pr(>Chisq)`[2])
res_mat[5,] <- c(lrt_agexpds$Chisq[2],lrt_agexpds$Df[2],lrt_agexpds$`Pr(>Chisq)`[2])
# Concatenate AIC values
res_mat <- cbind(mod_aic[,2],res_mat)
# Set labels
rownames(res_mat) <- c("Null","Age","PDS","Age+PDS","Age*PDS")
colnames(res_mat) <- c("AIC","LRT-chisq","LRT-dof","LRT-p")
show(res_mat)
lrt_age$Deviance[2]
lrt_age$Df[2]
# Store results into a table
res_mat <- matrix(data = as.numeric(NA), nrow = 5, ncol = 3)
res_mat[2,] <- c(lrt_age$Deviance[2],lrt_age$Df[2],lrt_age$`Pr(>Chi)`[2])
res_mat[3,] <- c(lrt_pds$Deviance[2],lrt_pds$Df[2],lrt_pds$`Pr(>Chi)`[2])
res_mat[4,] <- c(lrt_agepds$Deviance[2],lrt_agepds$Df[2],lrt_agepds$`Pr(>Chi)`[2])
res_mat[5,] <- c(lrt_agexpds$Deviance[2],lrt_agexpds$Df[2],lrt_agexpds$`Pr(>Chi)`[2])
# Concatenate AIC values
res_mat <- cbind(mod_aic[,2],res_mat)
# Set labels
rownames(res_mat) <- c("Null","Age","PDS","Age+PDS","Age*PDS")
colnames(res_mat) <- c("AIC","LRT-chisq","LRT-dof","LRT-p")
show(res_mat)
# Read data with random-effects structure
info <- read.csv("https://raw.githubusercontent.com/BrainMapINB/Pubertal_Connectome/main/Phenotypic/phenotypic.csv")
table(info$CST_Persev)
table(info$CST_Persev, useNA = T)
table(info$CST_Persev, useNA = "ifany")
info$CST_Persev
info$CST_Persev[2]
info$CST_Persev[2] <- NaN
table(info$CST_Persev, useNA = "ifany")
library(lme4)
jhu_romke <- read.csv("Downloads/hippocampus_connectivity.csv")
jhu_conn <- read.csv("Downloads/JHU-CONN_zFC.csv")
jhu_fsl <- read.csv("Downloads/JHU-CONN_zFC.csv")
names(jhu_romke)
head(jhu_romke$subject_id)
head(jhu_conn$ID)
identical(jhu_conn$ID,jhu_fsl$ID)
id_match <- match(jhu_romke$subject_id,jhu_conn)
id_match <- match(jhu_romke$subject_id,jhu_conn$ID)
identical(jhu_romke,jhu_conn$ID[id_match])
jhu_romke
identical(jhu_romke$subject_id,jhu_conn$ID[id_match])
jhu_romke$subject_id
jhu_conn$ID[id_match]
View(jhu_romke)
jhu_romke <- read.csv("Downloads/hippocampus_connectivity.csv")
jhu_conn <- read.csv("Downloads/JHU-CONN_zFC.csv")
jhu_fsl <- read.csv("Downloads/JHU-CONN_zFC.csv")
id_match <- match(jhu_romke$subject_id,jhu_conn$ID)
identical(jhu_romke$subject_id,jhu_conn$ID[id_match])
cor(jhu_romke$Harvard_post_PM,jhu_conn$pHIP.HO_PM[id_match])
cor(jhu_conn$pHIP.HO_PM,jhu_fsl$pHIP.HO_PM)
# Read matrix from github
data_example <- read.csv("https://raw.githubusercontent.com/BrainMapINB/TDA_ADHD/master/03-Inference/ADHD200_NYU_ppNIHPD_phenTDA.csv")
# Clear workspace
rm(list = ls())
# Read matrix from github
data_example <- read.csv("https://raw.githubusercontent.com/BrainMapINB/TDA_ADHD/master/03-Inference/ADHD200_NYU_ppNIHPD_phenTDA.csv")
names(data_example)
# Brain features are columns from 30 to 398
feat_columns <- 30:398
table(data_example$Site)
# Let's regress-out age and site
# Create a ramdom variable with 4 sites
sample(1:4, nrow(data_example))
# Let's regress-out age and site
# Create a ramdom variable with 4 sites
sample(1:4, nrow(data_example), replace = T)
# Let's regress-out age and site
# Create a ramdom variable with 4 sites
data_example$Site <- sample(1:4, nrow(data_example), replace = T)
# Very important to set 'site' variable as a factor (if not the regress-out would be numeric!)
data_example$Site <- factor(data_example$Site)
# Apply one regress-out as example
lm(data_example[,30]~Age+Site)
# Apply one regress-out as example
lm(formula = data_example[,30]~Age+Site, data = data_example)
# Apply one regress-out as example
resid(lm(formula = data_example[,30]~Age+Site, data = data_example))
# Store number of subjects and number of features
n_sub <- nrow(data_example)
n_feat <- length(feat_columns)
# Store number of subjects and number of features
n_sub <- nrow(data_example)
n_feat <- length(feat_columns)
# Do this for all the features and store results
# Create an empty matrix to store residuals
data_resid <- matrix(nrow = n_sub, ncol = n_feat)
# Extract residuals for each feature with a for loop
for(x in 1:n_feat){
data_resid[,x] <- resid(lm(formula = data_example[,x]~Age+Site, data = data_example))
}
lm(formula = data_example[,x]~Age+Site, data = data_example)
resid(lm(formula = data_example[,x]~Age+Site, data = data_example))
Y <- data_example[,feat_columns[x]]
# Extract residuals for each feature with a for loop
for(x in 1:n_feat){
Y <- data_example[,feat_columns[x]]
data_resid[,x] <- resid(lm(formula = Y~Age+Site, data = data_example))
}
# View residuals
View(data_resid)
# Clear workspace
rm(list = ls())
# Read data
DF <- read.csv("https://raw.githubusercontent.com/BrainMapINB/Pubertal_Connectome/main/Phenotypic/phenotypic.csv")
names(DF)
cor(DF$Age,DF$FDRMS)
cor(DF$Age,DF$PDSe)
cor(DF$FDRMS,DF$PDSe)
DF$FDRMS<mean(DF$FDRMS)
as.integer(DF$FDRMS<mean(DF$FDRMS))
as.factor(DF$FDRMS<mean(DF$FDRMS))
factor(as.integer(DF$FDRMS<mean(DF$FDRMS)))
# Create dichotomic variable
DF$Group <- factor(as.integer(DF$FDRMS<mean(DF$FDRMS)))
table(DF$Group)
# Create dichotomic variable
DF$Group <- factor(as.integer(DF$FDRMS<median(DF$FDRMS)))
table(DF$Group)
# Apply logistic models
mod_age <- glm(formula = Group~Age, data = DF, family = "binomial")
summary(mod_age)
# Apply logistic models
mod_age <- glm(formula = Group~scale(Age), data = DF, family = "binomial")
summary(mod_age)
coef(mod_age)
exp(coef(mod_age))
# PDS
mod_pds <- glm(formula = Group~scale(PDSe), data = DF, family = "binomial")
exp(coef(mod_pds))
# Age+PDS
mod_sum <- glm(formula = Group~scale(Age)+scale(PDSe), data = DF, family = "binomial")
exp(coef(mod_sum))
# AIC
AIC(mod_age,mod_pds,mod_sum)
# Apply logistic models
# Null
mod_null <- glm(formula = Group~1, data = DF, family = "binomial")
# LRT
anova(mod_null,mod_age)
# LRT
anova(mod_null, mod_age, test = "LRT")
# LRT
anova(mod_null, mod_age, mod_pds, test = "LRT")
# LRT
anova(mod_null, mod_age, mod_pds, mod_sum, test = "LRT")
# LRT
anova(mod_null, mod_age, test = "LRT")
# LRT
anova(mod_null, mod_age, test = "LRT")
anova(mod_null, mod_pds, test = "LRT")
anova(mod_null, mod_sum, test = "LRT")
anova(mod_age,mod_pds, test="LRT")
anova(mod_pds,mod_age, test="LRT")
# Clear workspace
rm(list = ls())
# Read data
DF <- read.csv("https://raw.githubusercontent.com/BrainMapINB/Pubertal_Connectome/main/Phenotypic/phenotypic.csv")
# Create dichotomic variable
DF$Group <- factor(as.integer(DF$FDRMS<median(DF$FDRMS)))
# Apply logistic models
# Null
mod_null <- glm(formula = Group~1, data = DF, family = "binomial")
# Age
mod_age <- glm(formula = Group~scale(Age), data = DF, family = "binomial")
exp(coef(mod_age))
# Age
mod_age <- glm(formula = Group~scale(Age), data = DF, family = "binomial")
exp(coef(mod_age))
# PDS
mod_pds <- glm(formula = Group~scale(PDSe), data = DF, family = "binomial")
exp(coef(mod_pds))
# Age+PDS
mod_sum <- glm(formula = Group~scale(Age)+scale(PDSe), data = DF, family = "binomial")
exp(coef(mod_sum))
coef(mod_sum)
# AIC
AIC(mod_age,mod_pds,mod_sum)
# LRT
anova(mod_null, mod_age, test = "LRT")
anova(mod_null, mod_pds, test = "LRT")
anova(mod_null, mod_sum, test = "LRT")
# log-OR comparison
summary(mod_pds)
# log-OR comparison
# Store stimates
sum_pds <- summary(mod_pds)
sum_pds$coefficients
coef(mod_age, complete = T)
# log-OR comparison
# Store stimates
coef_pds <- summary(mod_pds)$coefficients
coef_pds
# log-OR comparison
# Store estimates
coef_age <- summary(mod_age)$coefficients
coef_pds <- summary(mod_pds)$coefficients
# log-ORs
lor1 <- coef_age[2,1]
lor2 <- coef_pds[2,1]
# Standard errors
se1 <- coef_age[2,2]
se2 <- coef_pds[2,2]
# z-score difference
zdif <- (lor1-lor2)/sqrt(se1^2+se2^2)
# p-value
pnorm(zdif)
# p-value
pnorm(1.9)
coef_age
# p-value
pnorm(3.7596)
# p-value
pnorm(3.7596,lower.tail = F)
# p-value
pnorm(3.7596,lower.tail = F)*2
# p-value (bi-sided)
pnorm(abs(zdif), lower.tail = F)*2
# Read data
DF <- read.csv("https://raw.githubusercontent.com/BrainMapINB/Pubertal_Connectome/main/Phenotypic/phenotypic.csv")
names(DF)
# t-test
DF$Sex <- factor(DF$Sex)
t.test(formula = Age~Sex, data = DF)
t.test(formula = Age~Sex, data = DF)
names(DF)
t.test(formula = FDRMS~Sex, data = DF)
# Cohen'd example
library(psych)
t.test(DF$Age, DF$Sex)
t.test(DF$Age~DF$Sex)
t.test(DF$FDRMS~DF$Sex)
# Cohen'd example
library(psych)
cohen.d(DF$FDRMS, DF$Sex)
tresult <- t.test(DF$FDRMS~DF$Sex)
print(tresult)
cdresult <- cohen.d(DF$FDRMS, DF$Sex)
print(cdresult$cohen.d)
# Calculate chi-square test
# Create random variables
DF$Depression <- sample(x = c("Yes","No"), size = nrow(DF), replace = T)
DF$Depression
DF$Family <- sample(x = c("NoHist","OneParent","BothParent"), size = nrow(DF), replace = T)
# First create a frequency table
freqtb <- table(DF$Depression,DF$Family)
freqtb
print(freqtb)
chisq.test(freqtb)
# Create frequency table
table1 <- matrix(c(3830,195,1849,138,545+1074,93+219,480,120))
# Create frequency table
table1 <- matrix(c(3830,195,1849,138,545+1074,93+219,480,120),ncol = 2)
table1
# Create frequency table
table1 <- matrix(c(3830,195,1849,138,545+1074,93+219,480,120), nrow = 2)
table1
312/(1619+312)
chisq.test(table1)
# Clear workspace
rm(list = ls())
# Create frequency table for Figure 2
table1 <- matrix(c(3830,195,1849,138,545+1074,93+219,480,120), nrow = 2)
chisq.test(table1)
print(table1)
# Create frequency table for Figure 2
table2 <- matrix(c(6753,1025,6224,1554,552,213,426,339), nrow = 2)
print(table2)
chisq.test(table2)
library(devtools)
install_github("zchuri/NBR")
library(NBR)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = NULL, thrT = 4, nperm = 5)
show(nbr_result)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = NULL, thrT = 4, nperm = 5, alternative = "greater")
show(nbr_result)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = NULL, thrT = 2.3, nperm = 5, alternative = "greater")
show(nbr_result)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = NULL, thrT = 4, nperm = 5, alternative = "lower")
show(nbr_result)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = NULL, thrT = 4, nperm = 5, alternative = "less")
show(nbr_result)
net <- frontal2D[,-(1:3)]
net <- frontal2D[,-(1:3)]
nnodes <- 28
idata <- frontal2D[,1:3]
mod <- "~ Group + Sex * Age",
thrP <- NULL
thrT <- 4
nperm <- 5
mod <- "~ Group + Sex * Age"
thrP <- NULL
thrT <- 4
nperm <- 5
alternative <- "lower"
diag <- FALSE
cores <- NULL
nudist <- FALSE
expList <- NULL
verbose <- TRUE
# Check 'diag' and 'nnodes'
if(!is.logical(diag)) stop("STOP: diagonal variable must be logical!")
if(nnodes%%1 != 0) stop("STOP: number of nodes must be integer!!")
# Edge positions
tri_pos <- which(upper.tri(matrix(nrow = nnodes, ncol = nnodes), diag = diag),
arr.ind = T)
# Check if everything is alright
net_dim <- dim(net)
# If 3D input, reshape to 2D
if(length(net_dim)==3){
# Check number of variables
if(!all(net_dim[1:2]==nnodes)) stop("STOP: number of matrix variables does not match volume dimmensions")
# Extract edges
mx <- sapply(1:nrow(tri_pos), function(x) net[tri_pos[x,1],tri_pos[x,2],])
} else if(length(net_dim)==2){
# Check number of variables
if(net_dim[2] != nrow(tri_pos)) stop("STOP: number of matrix variables does not match column numbers")
# Extract edges
mx <- net
} else stop("STOP: network input has to be a 2D or 3D array!!")
if(nrow(idata)!=nrow(mx)) stop("STOP: network volume dimension 3 and dataset must match!!")
if(nperm%%1 != 0) stop("STOP: number of permutations must be integer!!")
if(!is.numeric(as.matrix(mx))) stop("STOP: network array is not numeric!!")
alt <- match.arg(alternative, c("two.sided","lower", "greater"))
# Apply example model edgewise
lm_form <- as.formula(paste0("mx[,",1,"]",mod))
fit_ex <- coefficients(summary(lm(lm_form, idata, ...)))
fit_ex <- coefficients(summary(lm(lm_form, idata)))
# Create empty object to store F-statistic and p-values edgewise
obsT <- matrix(0, nrow = nrow(tri_pos), ncol = (nrow(fit_ex)-1)*2)
# Compute observed stats
if(verbose) cat("Computing observed stats")
obsT <- t(sapply(1:nrow(tri_pos), function(x){
lm_form <- as.formula(paste0("mx[,",x,"]",mod))
fit <- coefficients(summary(lm(lm_form, idata)))
c(t(fit[2:nrow(fit),3:4]))
}))
paste0(rep(rownames(fit_ex)[2:nrow(fit_ex)], each = 2),c("_t","_p"))
colnames(obsT) <- paste0(rep(rownames(fit_ex)[2:nrow(fit_ex)], each = 2),c("_t","_p"))
if(verbose) cat(".\n")
# Find components based on T-statistic or p-values thresholds
if(all(is.null(thrT),is.null(thrP))) stop("STOP: t- or p-value threshold needed!")
if(is.null(thrP)){thr <- thrT; thr_idx <- 1}
if(is.null(thrT)){thr <- thrP; thr_idx <- 2}
# Initial variables for component search
obs_comp <- matrix(1:nnodes, nrow = nnodes, ncol = nrow(fit_ex)-1)
obs_list <- vector("list",nrow(fit_ex)-1)
rownames(fit_ex)[2:nrow(fit_ex)]
# Set names
names(obs_list) <- colnames(obs_comp) <- rownames(fit_ex)[2:nrow(fit_ex)]
obs_comp
thr_idx
alt
obsT[,ii*2-thr_idx]
ii <- 1
obsT[,ii*2-thr_idx]
edges <- which(obsT[,ii*2-thr_idx]<thr)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = NULL, thrT = -4, nperm = 5, alternative = "less")
show(nbr_result)
thrT <- -4
if(is.null(thrP)){thr <- thrT; thr_idx <- 1}
obsT[1,]
edges <- which(obsT[,ii*2-thr_idx]<thr)
length(edges)>0
# Generate empty object for component label
component <- vector("integer", length(edges))
# Store strength intensity
strength <- abs(obsT[edges,ii*2-thr_idx])-abs(thr)
# Maintain polarity
strength <- strength*(1-(obsT[edges,ii*2-thr_idx]<0)*2)
# Label nodes and edge component
for(jj in 1:length(edges)) component[jj] <- obs_comp[tri_pos[edges[jj],],ii] <- min(obs_comp[tri_pos[edges[jj],],ii])
component
# Store results
obs_list[[ii]] <- cbind(edges,tri_pos[edges,1],tri_pos[edges,2],component,strength)
colnames(obs_list[[ii]]) <- c("2Dcol","3Drow","3Dcol","comp","strn")
thrP
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = NULL, thrT = -4, nperm = 5, alternative = "less")
show(nbr_result$components$GroupPatient)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = NULL, thrT = 2, nperm = 5, alternative = "greater")
show(nbr_result$components$GroupPatient)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = NULL, thrT = 0.01, nperm = 5, alternative = "greater")
show(nbr_result$components$GroupPatient)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = 0.01, thrT = NULL, nperm = 5, alternative = "greater")
show(nbr_result$components$GroupPatient)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = 0.01, thrT = NULL, nperm = 5, alternative = "lower")
show(nbr_result$components$GroupPatient)
data(frontal2D)
nbr_result <- nbr_lm(net = frontal2D[,-(1:3)], nnodes = 28,
idata = frontal2D[,1:3], mod = "~ Group + Sex * Age",
thrP = 0.01, thrT = NULL, nperm = 5, alternative = "less")
show(nbr_result$components$GroupPatient)
nbr_result$fwe
setwd()
setwd("Documents/UNIVERSIDAD/MCGILL/Projects/NBR/")
load_all()
nbr_lm()
check()
use_gpl3_license()
document()
check()
check()
